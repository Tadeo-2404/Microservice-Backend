services:
  # Service Discovery (Eureka)
  eureka:
    container_name: eureka-server
    build:
      context: ../discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"  # Expose the Eureka dashboard on port 8761
    environment:
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"  # Disable client registration
      EUREKA_CLIENT_FETCH_REGISTRY: "false"  # Disable registry fetching
    networks:
      - product-service-network  # Connect to a custom network

  # PostgreSQL Database
  postgresql:
    container_name: postgresql-db
    image: postgres:latest  # Use the latest PostgreSQL image
    ports:
      - "5432:5432"  # Expose PostgreSQL port
    environment:
      POSTGRES_DB: postgres  # Name of the database
      POSTGRES_USER: postgres  # PostgreSQL user
      POSTGRES_PASSWORD: root  # PostgreSQL user password
    networks:
      - product-service-network  # Connect to a custom network

  # Product Microservice
  product:
    container_name: product-service
    build:
      context: ../product-service  # Path to the product microservice directory
      dockerfile: Dockerfile  # Name of the Dockerfile (default is Dockerfile)
    ports:
      - "8090:8090"  # Expose product service on port 8090
    environment:
      SPRING_APPLICATION_NAME: product-service
      SPRING_PROFILES_ACTIVE: prod 
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql-db:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
    volumes:
      - postgres-volume:/var/lib/postgres
    depends_on:
      - eureka  # Wait for Eureka to be up
      - postgresql  # Wait for PostgreSQL to be up
    networks:
      - product-service-network  # Connect to a custom network

networks:
  product-service-network: 

volumes:
  postgres-volume: