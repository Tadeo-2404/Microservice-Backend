services:
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # Mount the configuration file
    ports:
      - "9090:9090" # Expose Prometheus
    networks:
      - microservices-network  # Connect to a custom network
      
  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000" # Expose Grafana
    depends_on:
      - prometheus
    networks:
      - microservices-network  # Connect to a custom network

  # ZooKeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - microservices-network  # Connect to a custom network
      
  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservices-network  # Connect to a custom network

  # MongoDB for Inventory Microservice
  mongo:
    container_name: mongo-db
    image: mongo:latest  # Use the latest MongoDB image
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      - mongo-volume:/data/db
    ports:
      - "27017:27017"  # Expose MongoDB port
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://admin:admin@mongo:27017/?authSource=admin --quiet
      interval: 10s  
      timeout: 10s   
      retries: 5      
    networks:
      - microservices-network  # Connect to a custom network

  # PostgreSQL Database
  postgresql:
    container_name: postgresql-db
    image: postgres:latest  # Use the latest PostgreSQL image
    ports:
      - "5432:5432"  # Expose PostgreSQL port
    environment:
      POSTGRES_DB: postgres  # Name of the database
      POSTGRES_USER: postgres  # PostgreSQL user
      POSTGRES_PASSWORD: root  # PostgreSQL user password
    volumes:
      - postgres-volume:/data/db
    networks:
      - microservices-network  # Connect to a custom network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Product Microservice
  product:
    container_name: product-service
    build:
      context: ./product-service  # Path to the product microservice directory
      dockerfile: Dockerfile  # Name of the Dockerfile (default is Dockerfile)
    ports:
      - "8090:8090"  # Expose product service on port 8090
    environment:
      SPRING_APPLICATION_NAME: product-service
      SPRING_PROFILES_ACTIVE: prod 
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql-db:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
    volumes:
      - postgres-volume:/data/db
    depends_on:
      postgresql:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network  # Connect to a custom network

  # Order Microservice
  order:
    container_name: order-service
    build:
      context: ./order-service  # Path to the order microservice directory
      dockerfile: Dockerfile  # Name of the Dockerfile (default is Dockerfile)
    ports:
      - "8092:8092"  # Expose order service on port 8092
    environment:
      SPRING_APPLICATION_NAME: order-service
      SPRING_PROFILES_ACTIVE: prod  # Specify the active profile
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql-db:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
    restart: always
    depends_on:
      - postgresql  # Wait for PostgreSQL to be up
    networks:
      - microservices-network  # Connect to a custom network

# Inventory Microservice
  inventory:
    container_name: inventory-service
    build:
      context: ./inventory-service  # Path to the inventory microservice directory
      dockerfile: Dockerfile  # Name of the Dockerfile (default is Dockerfile)
    ports:
      - "8091:8091"  # Expose inventory service on port 8091
    environment:
      SPRING_APPLICATION_NAME: inventory-service
      SPRING_PROFILES_ACTIVE: prod  
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin@mongo:27017/inventory-service?authSource=admin
    depends_on:
      mongo:
        condition: service_healthy
    restart: always
    networks:
      - microservices-network  # Connect to a custom network

  # API Gateway (Spring Cloud Gateway or Zuul)
  api-gateway:
    container_name: api-gateway
    build:
      context: ./gateway  # Path to the API Gateway directory
      dockerfile: Dockerfile  # Name of the Dockerfile (default is Dockerfile)
    ports:
      - "6001:6001"  # Expose API Gateway on port 6001
    environment:
      SPRING_APPLICATION_NAME: gateway
    restart: always
    networks:
      - microservices-network  # Connect to a custom network

networks:
  microservices-network:  # Define a custom network for service communication
    driver: bridge

volumes:
  mongo-volume: 
  postgres-volume: