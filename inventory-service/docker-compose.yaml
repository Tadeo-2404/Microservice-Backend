services:
  # ZooKeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
      
  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # MongoDB for Inventory Microservice
  mongo:
    container_name: mongo-db
    image: mongo:latest  # Use the latest MongoDB image
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      - mongo-volume:/data/db
    ports:
      - "27017:27017"  # Expose MongoDB port
    networks:
      - inventory-service-network  # Connect to a custom network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://admin:admin@mongo:27017/?authSource=admin --quiet
      interval: 10s  
      timeout: 10s   
      retries: 5      

  # Inventory Microservice
  inventory:
    container_name: inventory-service
    build:
      context: .  # Path to the inventory microservice directory
      dockerfile: Dockerfile  # Name of the Dockerfile (default is Dockerfile)
    ports:
      - "8091:8091"  # Expose inventory service on port 8091
    environment:
      SPRING_APPLICATION_NAME: inventory-service
      SPRING_PROFILES_ACTIVE: prod  
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin@mongo:27017/inventory-service?authSource=admin
    depends_on:
      mongo:
        condition: service_healthy
    restart: always
    networks:
      - inventory-service-network  # Connect to a custom network

networks:
  inventory-service-network:  # Define a custom network for service communication

volumes:
  mongo-volume:  # Volume to persist MongoDB data