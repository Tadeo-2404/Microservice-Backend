pipeline {
    agent any

    parameters {
        booleanParam(name: 'skip_sonar', defaultValue: false, description: 'Set to true to skip sonar analysis')
        booleanParam(name: 'build_container', defaultValue: false, description: 'Set to true to build the container')
        booleanParam(name: 'run_container', defaultValue: false, description: 'Set to true to run the container')
        booleanParam(name: 'deploy_container', defaultValue: false, description: 'Set to true to deploy the container')
    }

    tools {
        maven 'maven'
    }

    stages {
        stage('Set Up') {
            steps {
                sh "docker stop sonarqube || true"
                sh "docker start sonarqube || true"
                sh "docker stop inventory-service || true"
                sh "docker rm inventory-service || true"
                sh "sleep 10"
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir("inventory-service") {
                    if (!params.skip_sonar) {
                      withSonarQubeEnv('SonarServer') {
                      sh "mvn clean package sonar:sonar \
                      -Dsonar.projectKey=inventory-service \
                      -Dsonar.projectName=inventory-service \
                      -Dsonar.sources=src/main"
                      }
                   }
                }
            }
        }

        stage('Build Docker Image') {
            when { expression { params.build_container != false } } 
            steps {
                dir('inventory-service') {
                    sh "docker build -t inventory-service ."
                }
            }
        }

        stage('Run Docker Container') {
            when { expression { params.run_container != false } } 
            steps {
                dir('inventory-service') {
                   sh "docker run -d --name inventory-service -p 8091:8091 inventory-service"
                }
            }
        }

        stage('Deploy Docker Container') {
            when { expression { params.run_container != false } } 
            steps {
                dir('inventory-service') {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'docker_login', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                      sh 'docker login -u $USERNAME -p $PASSWORD'
                      sh 'docker tag inventory-service:latest pelusa0303/inventory-service:latest'
                      sh 'docker push pelusa0303/inventory-service:latest'
                   }
                }
            }
        }
    }
}
